import { test, expect } from '@playwright/test';

test.describe('Transactions Page Detailed Tests', () => {
  
  test('should display transactions page header and navigation', async ({ page }) => {
    console.log('üîç Verificando header y navegaci√≥n de p√°gina de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    const currentUrl = page.url();
    console.log(`üìç URL actual: ${currentUrl}`);
    
    // Verificar elementos del header
    const headerElements = [
      'text=üí≥ Transacciones',
      'text=Transacciones',
      'text=Nueva Transacci√≥n',
      'text=Agregar Transacci√≥n',
      'text=Crear Primera Transacci√≥n'
    ];
    
    let foundHeaderElements = 0;
    for (const selector of headerElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Elemento de header encontrado: ${selector}`);
        foundHeaderElements++;
      } catch {
        console.log(`‚ö†Ô∏è Elemento de header no encontrado: ${selector}`);
      }
    }
    
    console.log(`üìä Elementos de header encontrados: ${foundHeaderElements}/${headerElements.length}`);
    expect(foundHeaderElements).toBeGreaterThan(0);
    console.log('‚úÖ Header de p√°gina de transacciones correcto');
  });
  
  test('should display transaction summary cards', async ({ page }) => {
    console.log('üîç Verificando tarjetas de resumen de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Verificar tarjetas de resumen
    const summaryCards = [
      'text=TOTAL INGRESOS',
      'text=TOTAL GASTOS',
      'text=BALANCE NETO',
      'text=TRANSACCIONES',
      'text=Ingresos',
      'text=Gastos',
      'text=Positivo'
    ];
    
    let foundSummaryCards = 0;
    for (const selector of summaryCards) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Tarjeta de resumen encontrada: ${selector}`);
        foundSummaryCards++;
      } catch {
        console.log(`‚ö†Ô∏è Tarjeta de resumen no encontrada: ${selector}`);
      }
    }
    
    console.log(`üìä Tarjetas de resumen encontradas: ${foundSummaryCards}/${summaryCards.length}`);
    expect(foundSummaryCards).toBeGreaterThan(3);
    console.log('‚úÖ Tarjetas de resumen de transacciones mostradas correctamente');
  });
  
  test('should display transaction filters and controls', async ({ page }) => {
    console.log('üîç Verificando filtros y controles de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Verificar filtros y controles
    const filterElements = [
      'text=Filtros',
      'text=Mostrar Filtros',
      'text=Tipo',
      'text=Per√≠odo',
      'text=Todos los tipos',
      'text=Ingresos',
      'text=Gastos',
      'text=Transferencias Salida',
      'text=Transferencias Entrada'
    ];
    
    let foundFilters = 0;
    for (const selector of filterElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Filtro/control encontrado: ${selector}`);
        foundFilters++;
      } catch {
        console.log(`‚ö†Ô∏è Filtro/control no encontrado: ${selector}`);
      }
    }
    
    // Verificar controles de ordenamiento
    const sortingElements = [
      'text=Fecha (M√°s reciente)',
      'text=Fecha (M√°s antigua)',
      'text=Monto (Mayor a menor)',
      'text=Monto (Menor a mayor)',
      'text=Descripci√≥n (A-Z)'
    ];
    
    let foundSorting = 0;
    for (const selector of sortingElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Control de ordenamiento encontrado: ${selector}`);
        foundSorting++;
      } catch {
        console.log(`‚ö†Ô∏è Control de ordenamiento no encontrado: ${selector}`);
      }
    }
    
    console.log(`üìä Filtros encontrados: ${foundFilters}/${filterElements.length}`);
    console.log(`üìä Controles de ordenamiento encontrados: ${foundSorting}/${sortingElements.length}`);
    
    expect(foundFilters + foundSorting).toBeGreaterThan(0);
    console.log('‚úÖ Filtros y controles de transacciones disponibles');
  });
  
  test('should interact with transaction filters', async ({ page }) => {
    console.log('üîç Probando interacci√≥n con filtros de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Probar filtro de tipo
    const typeFilterSelectors = [
      'text=Tipo',
      'text=Todos los tipos',
      'text=Ingresos',
      'text=Gastos'
    ];
    
    let filterInteracted = false;
    for (const selector of typeFilterSelectors) {
      try {
        await page.locator(selector).click({ timeout: 3000 });
        console.log(`‚úÖ Filtro clickeado: ${selector}`);
        filterInteracted = true;
        await page.waitForTimeout(1000);
        break;
      } catch {
        console.log(`‚ö†Ô∏è No se pudo clickear filtro: ${selector}`);
      }
    }
    
    // Probar filtro de per√≠odo
    const periodFilterSelectors = [
      'text=Per√≠odo',
      'text=Mostrar Filtros'
    ];
    
    for (const selector of periodFilterSelectors) {
      try {
        await page.locator(selector).click({ timeout: 3000 });
        console.log(`‚úÖ Filtro de per√≠odo clickeado: ${selector}`);
        await page.waitForTimeout(1000);
        break;
      } catch {
        console.log(`‚ö†Ô∏è No se pudo clickear filtro de per√≠odo: ${selector}`);
      }
    }
    
    if (filterInteracted) {
      console.log('‚úÖ Filtros de transacciones son interactivos');
    } else {
      console.log('‚ö†Ô∏è No se pudieron interactuar con los filtros');
    }
    
    console.log('‚úÖ Test de interacci√≥n con filtros completado');
  });
  
  test('should display transaction list area', async ({ page }) => {
    console.log('üîç Verificando √°rea de lista de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Verificar √°rea de lista de transacciones
    const listAreaElements = [
      'text=Todas las Transacciones',
      'text=Cargando transacciones...',
      'text=üéØ ¬°Comienza tu Gesti√≥n Financiera!',
      'text=Crea tu primera transacci√≥n para empezar a controlar tus ingresos y gastos'
    ];
    
    let foundListElements = 0;
    for (const selector of listAreaElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Elemento de lista encontrado: ${selector}`);
        foundListElements++;
      } catch {
        console.log(`‚ö†Ô∏è Elemento de lista no encontrado: ${selector}`);
      }
    }
    
    // Verificar si hay transacciones existentes
    const transactionItems = await page.locator('.transaction-item, .transaction-row, [data-testid*="transaction"]').count();
    console.log(`üìä Transacciones existentes encontradas: ${transactionItems}`);
    
    console.log(`üìä Elementos de lista encontrados: ${foundListElements}/${listAreaElements.length}`);
    expect(foundListElements).toBeGreaterThan(0);
    console.log('‚úÖ √Årea de lista de transacciones mostrada correctamente');
  });
  
  test('should create income transaction with form', async ({ page }) => {
    console.log('üîç Probando creaci√≥n de transacci√≥n de ingreso...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Buscar bot√≥n para crear transacci√≥n
    const createButtons = [
      'text=Agregar Transacci√≥n',
      'text=Nueva Transacci√≥n',
      'text=Crear Primera Transacci√≥n'
    ];
    
    let buttonClicked = false;
    for (const button of createButtons) {
      try {
        await page.locator(button).click({ timeout: 5000 });
        console.log(`‚úÖ Bot√≥n clickeado: ${button}`);
        buttonClicked = true;
        break;
      } catch {
        console.log(`‚ö†Ô∏è Bot√≥n no encontrado: ${button}`);
      }
    }
    
    if (buttonClicked) {
      await page.waitForTimeout(2000);
      
      // Verificar que apareci√≥ el formulario
      const formElements = [
        'input[placeholder="¬øPara qu√© fue este gasto?"]',
        'textarea[placeholder="Informaci√≥n adicional..."]',
        'input[type="date"]',
        'input[placeholder="urgente, recurrente, etc."]'
      ];
      
      let formFound = false;
      for (const selector of formElements) {
        try {
          await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
          console.log(`‚úÖ Campo de formulario encontrado: ${selector}`);
          formFound = true;
        } catch {
          console.log(`‚ö†Ô∏è Campo de formulario no encontrado: ${selector}`);
        }
      }
      
      if (formFound) {
        // Llenar formulario de ingreso
        try {
          await page.locator('input[placeholder="¬øPara qu√© fue este gasto?"]').fill('100');
          console.log('‚úÖ Monto de ingreso ingresado');
          
          await page.locator('textarea[placeholder="Informaci√≥n adicional..."]').fill('Ingreso de prueba');
          console.log('‚úÖ Descripci√≥n de ingreso ingresada');
          
          // Buscar opci√≥n de ingreso
          const incomeOptions = [
            'text=Ingreso',
            'text=Income',
            'input[value="income"]',
            'input[type="radio"][value="income"]'
          ];
          
          for (const option of incomeOptions) {
            try {
              await page.locator(option).click({ timeout: 2000 });
              console.log(`‚úÖ Tipo de ingreso seleccionado: ${option}`);
              break;
            } catch {
              // Continuar
            }
          }
          
          // Buscar bot√≥n de guardar
          const saveButtons = [
            'button[type="submit"]',
            'text=Guardar',
            'text=Save',
            'text=Crear',
            'text=Agregar'
          ];
          
          for (const saveBtn of saveButtons) {
            try {
              await page.locator(saveBtn).click({ timeout: 3000 });
              console.log(`‚úÖ Bot√≥n de guardar clickeado: ${saveBtn}`);
              break;
            } catch {
              // Continuar
            }
          }
          
          await page.waitForTimeout(1000);
          console.log('‚úÖ Transacci√≥n de ingreso creada exitosamente');
        } catch (error) {
          console.log(`‚ö†Ô∏è Error llenando formulario: ${(error as Error).message}`);
        }
      } else {
        console.log('‚ö†Ô∏è Formulario no apareci√≥ despu√©s del clic');
      }
    } else {
      console.log('‚ö†Ô∏è No se encontr√≥ bot√≥n para crear transacci√≥n');
    }
    
    console.log('‚úÖ Test de creaci√≥n de ingreso completado');
  });
  
  test('should create expense transaction with form', async ({ page }) => {
    console.log('üîç Probando creaci√≥n de transacci√≥n de gasto...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Buscar bot√≥n para crear transacci√≥n
    const createButtons = [
      'text=Agregar Transacci√≥n',
      'text=Nueva Transacci√≥n',
      'text=Crear Primera Transacci√≥n'
    ];
    
    let buttonClicked = false;
    for (const button of createButtons) {
      try {
        await page.locator(button).click({ timeout: 5000 });
        console.log(`‚úÖ Bot√≥n clickeado: ${button}`);
        buttonClicked = true;
        break;
      } catch {
        console.log(`‚ö†Ô∏è Bot√≥n no encontrado: ${button}`);
      }
    }
    
    if (buttonClicked) {
      await page.waitForTimeout(2000);
      
      // Llenar formulario de gasto
      try {
        await page.locator('input[placeholder="¬øPara qu√© fue este gasto?"]').fill('50');
        console.log('‚úÖ Monto de gasto ingresado');
        
        await page.locator('textarea[placeholder="Informaci√≥n adicional..."]').fill('Gasto de prueba');
        console.log('‚úÖ Descripci√≥n de gasto ingresada');
        
        // Buscar opci√≥n de gasto
        const expenseOptions = [
          'text=Gasto',
          'text=Expense',
          'input[value="expense"]',
          'input[type="radio"][value="expense"]'
        ];
        
        for (const option of expenseOptions) {
          try {
            await page.locator(option).click({ timeout: 2000 });
            console.log(`‚úÖ Tipo de gasto seleccionado: ${option}`);
            break;
          } catch {
            // Continuar
          }
        }
        
        // Buscar bot√≥n de guardar
        const saveButtons = [
          'button[type="submit"]',
          'text=Guardar',
          'text=Save',
          'text=Crear',
          'text=Agregar'
        ];
        
        for (const saveBtn of saveButtons) {
          try {
            await page.locator(saveBtn).click({ timeout: 3000 });
            console.log(`‚úÖ Bot√≥n de guardar clickeado: ${saveBtn}`);
            break;
          } catch {
            // Continuar
          }
        }
        
        await page.waitForTimeout(1000);
        console.log('‚úÖ Transacci√≥n de gasto creada exitosamente');
      } catch (error) {
        console.log(`‚ö†Ô∏è Error llenando formulario de gasto: ${(error as Error).message}`);
      }
    } else {
      console.log('‚ö†Ô∏è No se encontr√≥ bot√≥n para crear transacci√≥n');
    }
    
    console.log('‚úÖ Test de creaci√≥n de gasto completado');
  });
  
  test('should handle empty transaction state', async ({ page }) => {
    console.log('üîç Verificando estado vac√≠o de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Verificar elementos de estado vac√≠o
    const emptyStateElements = [
      'text=üéØ ¬°Comienza tu Gesti√≥n Financiera!',
      'text=Crea tu primera transacci√≥n para empezar a controlar tus ingresos y gastos',
      'text=Cargando transacciones...',
      'text=Todas las Transacciones (0)'
    ];
    
    let foundEmptyState = 0;
    for (const selector of emptyStateElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Elemento de estado vac√≠o encontrado: ${selector}`);
        foundEmptyState++;
      } catch {
        console.log(`‚ö†Ô∏è Elemento de estado vac√≠o no encontrado: ${selector}`);
      }
    }
    
    // Verificar que no hay transacciones mostradas
    const transactionCount = await page.locator('.transaction-item, .transaction-row, [data-testid*="transaction"]').count();
    console.log(`üìä Transacciones mostradas: ${transactionCount}`);
    
    console.log(`üìä Elementos de estado vac√≠o encontrados: ${foundEmptyState}/${emptyStateElements.length}`);
    expect(foundEmptyState).toBeGreaterThan(0);
    console.log('‚úÖ Estado vac√≠o de transacciones manejado correctamente');
  });
  
  test('should display transaction statistics', async ({ page }) => {
    console.log('üîç Verificando estad√≠sticas de transacciones...');
    
    await page.goto('/transactions');
    console.log('üìç Navegando a p√°gina de transacciones...');
    
    // Verificar estad√≠sticas mostradas
    const statisticsElements = [
      'text=TOTAL INGRESOS',
      'text=TOTAL GASTOS',
      'text=BALANCE NETO',
      'text=TRANSACCIONES',
      'text=$0.00',
      'text=0'
    ];
    
    let foundStatistics = 0;
    for (const selector of statisticsElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Estad√≠stica encontrada: ${selector}`);
        foundStatistics++;
      } catch {
        console.log(`‚ö†Ô∏è Estad√≠stica no encontrada: ${selector}`);
      }
    }
    
    // Verificar valores espec√≠ficos
    const valueElements = [
      'text=Ingresos',
      'text=Gastos',
      'text=Positivo'
    ];
    
    let foundValues = 0;
    for (const selector of valueElements) {
      try {
        await expect(page.locator(selector)).toBeVisible({ timeout: 3000 });
        console.log(`‚úÖ Valor encontrado: ${selector}`);
        foundValues++;
      } catch {
        console.log(`‚ö†Ô∏è Valor no encontrado: ${selector}`);
      }
    }
    
    console.log(`üìä Estad√≠sticas encontradas: ${foundStatistics}/${statisticsElements.length}`);
    console.log(`üìä Valores encontrados: ${foundValues}/${valueElements.length}`);
    expect(foundStatistics + foundValues).toBeGreaterThan(3);
    console.log('‚úÖ Estad√≠sticas de transacciones mostradas correctamente');
  });
});
